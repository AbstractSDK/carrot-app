{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "App execute messages",
  "oneOf": [
    {
      "description": "Update autocompound settings",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "autocompound_cooldown_seconds": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint64"
                },
                {
                  "type": "null"
                }
              ]
            },
            "autocompound_rewards_config": {
              "anyOf": [
                {
                  "$ref": "#/definitions/AutocompoundRewardsConfig"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Create the initial liquidity position",
      "type": "object",
      "required": [
        "create_position"
      ],
      "properties": {
        "create_position": {
          "$ref": "#/definitions/CreatePositionMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit funds onto the app",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "funds"
          ],
          "properties": {
            "belief_price0": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "belief_price1": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw liquidity available on the position",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "properties": {
            "amount": {
              "description": "Liquidity amount, withdraws everything when omitted",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            },
            "swap_to": {
              "description": "When provided, will swap withdrawn liquidity to single asset",
              "anyOf": [
                {
                  "$ref": "#/definitions/SwapToAsset"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Auto-compounds the pool rewards into the pool",
      "type": "object",
      "required": [
        "autocompound"
      ],
      "properties": {
        "autocompound": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AutocompoundRewardsConfig": {
      "description": "Configuration on how rewards should be distributed to the address who helped to execute autocompound",
      "type": "object",
      "required": [
        "gas_asset",
        "max_gas_balance",
        "min_gas_balance",
        "reward",
        "swap_asset"
      ],
      "properties": {
        "gas_asset": {
          "description": "Gas denominator for this chain",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        },
        "max_gas_balance": {
          "description": "Upper bound of gas tokens expected after the swap",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "min_gas_balance": {
          "description": "If gas token balance falls below this bound a swap will be generated",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "reward": {
          "description": "Reward amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "swap_asset": {
          "description": "Denominator of the asset that will be used for swap to the gas asset",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CreatePositionMessage": {
      "type": "object",
      "required": [
        "asset0",
        "asset1",
        "funds",
        "lower_tick",
        "upper_tick"
      ],
      "properties": {
        "asset0": {
          "description": "The two next fields indicate the token0/token1 ratio we want to deposit inside the current ticks",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "asset1": {
          "$ref": "#/definitions/Coin"
        },
        "belief_price0": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "belief_price1": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lower_tick": {
          "type": "integer",
          "format": "int64"
        },
        "max_spread": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "upper_tick": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SwapToAsset": {
      "type": "object",
      "required": [
        "to_asset"
      ],
      "properties": {
        "max_spread": {
          "anyOf": [
            {
              "$ref": "#/definitions/Decimal"
            },
            {
              "type": "null"
            }
          ]
        },
        "to_asset": {
          "$ref": "#/definitions/AssetEntry"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "App execute messages",
  "oneOf": [
    {
      "description": "Create the initial liquidity position",
      "type": "object",
      "required": [
        "create_position"
      ],
      "properties": {
        "create_position": {
          "$ref": "#/definitions/CreatePositionMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Deposit funds onto the app",
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "required": [
            "funds"
          ],
          "properties": {
            "funds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Partial withdraw of the funds available on the app",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw everything that is on the app",
      "type": "object",
      "required": [
        "withdraw_all"
      ],
      "properties": {
        "withdraw_all": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Auto-compounds the pool rewards into the pool",
      "type": "object",
      "required": [
        "autocompound"
      ],
      "properties": {
        "autocompound": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CreatePositionMessage": {
      "type": "object",
      "required": [
        "asset0",
        "asset1",
        "funds",
        "lower_tick",
        "upper_tick"
      ],
      "properties": {
        "asset0": {
          "description": "The two next fields indicate the token0/token1 ratio we want to deposit inside the current ticks",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "asset1": {
          "$ref": "#/definitions/Coin"
        },
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lower_tick": {
          "type": "integer",
          "format": "int64"
        },
        "upper_tick": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

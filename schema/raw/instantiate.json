{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "App instantiate message",
  "type": "object",
  "required": [
    "autocompound_cooldown_seconds",
    "autocompound_rewards_config",
    "pool_id"
  ],
  "properties": {
    "autocompound_cooldown_seconds": {
      "description": "Seconds to wait before autocompound is incentivized.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "autocompound_rewards_config": {
      "description": "Configuration of rewards to the address who helped to execute autocompound",
      "allOf": [
        {
          "$ref": "#/definitions/AutocompoundRewardsConfig"
        }
      ]
    },
    "create_position": {
      "description": "Create position with instantiation. Will not create position if omitted",
      "anyOf": [
        {
          "$ref": "#/definitions/CreatePositionMessage"
        },
        {
          "type": "null"
        }
      ]
    },
    "pool_id": {
      "description": "Id of the pool used to get rewards",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetEntry": {
      "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
      "type": "string"
    },
    "AutocompoundRewardsConfig": {
      "description": "Configuration on how rewards should be distributed to the address who helped to execute autocompound",
      "type": "object",
      "required": [
        "gas_asset",
        "max_gas_balance",
        "min_gas_balance",
        "reward",
        "swap_asset"
      ],
      "properties": {
        "gas_asset": {
          "description": "Gas denominator for this chain",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        },
        "max_gas_balance": {
          "description": "Upper bound of gas tokens expected after the swap",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "min_gas_balance": {
          "description": "If gas token balance falls below this bound a swap will be generated",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "reward": {
          "description": "Reward amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "swap_asset": {
          "description": "Denominator of the asset that will be used for swap to the gas asset",
          "allOf": [
            {
              "$ref": "#/definitions/AssetEntry"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CreatePositionMessage": {
      "type": "object",
      "required": [
        "asset0",
        "asset1",
        "funds",
        "lower_tick",
        "upper_tick"
      ],
      "properties": {
        "asset0": {
          "description": "The two next fields indicate the token0/token1 ratio we want to deposit inside the current ticks",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "asset1": {
          "$ref": "#/definitions/Coin"
        },
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "lower_tick": {
          "type": "integer",
          "format": "int64"
        },
        "upper_tick": {
          "type": "integer",
          "format": "int64"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

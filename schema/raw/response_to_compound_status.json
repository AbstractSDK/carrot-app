{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CompoundStatusResponse",
  "type": "object",
  "required": [
    "autocompound_reward",
    "autocompound_reward_available",
    "incentives",
    "spread_rewards",
    "status"
  ],
  "properties": {
    "autocompound_reward": {
      "$ref": "#/definitions/AssetBase_for_String"
    },
    "autocompound_reward_available": {
      "description": "Wether user have enough balance to reward or can swap to get enough",
      "type": "boolean"
    },
    "incentives": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "spread_rewards": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "status": {
      "$ref": "#/definitions/CompoundStatus"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AssetBase_for_String": {
      "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "Specifies the asset's amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Specifies the asset's type (CW20 or native)",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfoBase_for_String"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfoBase_for_String": {
      "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "CompoundStatus": {
      "description": "Wether contract is ready for the compound",
      "oneOf": [
        {
          "description": "Contract is ready for the compound",
          "type": "object",
          "required": [
            "ready"
          ],
          "properties": {
            "ready": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "How much seconds left for the next compound",
          "type": "object",
          "required": [
            "cooldown"
          ],
          "properties": {
            "cooldown": {
              "$ref": "#/definitions/Uint64"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "No open position right now",
          "type": "object",
          "required": [
            "no_position"
          ],
          "properties": {
            "no_position": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Position exists in state, but errors on query to the pool",
          "type": "object",
          "required": [
            "position_not_available"
          ],
          "properties": {
            "position_not_available": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}

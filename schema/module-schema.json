{
  "contract_name": "module-schema",
  "contract_version": "0.21.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "App instantiate message",
    "type": "object",
    "required": [
      "autocompound_cooldown_seconds",
      "autocompound_rewards_config",
      "pool_id"
    ],
    "properties": {
      "autocompound_cooldown_seconds": {
        "description": "Seconds to wait before autocompound is incentivized.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "autocompound_rewards_config": {
        "description": "Configuration of rewards to the address who helped to execute autocompound",
        "allOf": [
          {
            "$ref": "#/definitions/AutocompoundRewardsConfig"
          }
        ]
      },
      "create_position": {
        "description": "Create position with instantiation. Will not create position if omitted",
        "anyOf": [
          {
            "$ref": "#/definitions/CreatePositionMessage"
          },
          {
            "type": "null"
          }
        ]
      },
      "pool_id": {
        "description": "Id of the pool used to get rewards",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "AutocompoundRewardsConfig": {
        "description": "Configuration on how rewards should be distributed to the address who helped to execute autocompound",
        "type": "object",
        "required": [
          "gas_asset",
          "max_gas_balance",
          "min_gas_balance",
          "reward",
          "swap_asset"
        ],
        "properties": {
          "gas_asset": {
            "description": "Gas denominator for this chain",
            "allOf": [
              {
                "$ref": "#/definitions/AssetEntry"
              }
            ]
          },
          "max_gas_balance": {
            "description": "Upper bound of gas tokens expected after the swap",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "min_gas_balance": {
            "description": "If gas token balance falls below this bound a swap will be generated",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "reward": {
            "description": "Reward amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "swap_asset": {
            "description": "Denominator of the asset that will be used for swap to the gas asset",
            "allOf": [
              {
                "$ref": "#/definitions/AssetEntry"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CreatePositionMessage": {
        "type": "object",
        "required": [
          "asset0",
          "asset1",
          "funds",
          "lower_tick",
          "upper_tick"
        ],
        "properties": {
          "asset0": {
            "description": "The two next fields indicate the token0/token1 ratio we want to deposit inside the current ticks",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "asset1": {
            "$ref": "#/definitions/Coin"
          },
          "belief_price0": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "belief_price1": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "funds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "lower_tick": {
            "type": "integer",
            "format": "int64"
          },
          "max_spread": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "upper_tick": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "description": "Update autocompound settings",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "autocompound_cooldown_seconds": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint64"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "autocompound_rewards_config": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AutocompoundRewardsConfig"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Create the initial liquidity position",
        "type": "object",
        "required": [
          "create_position"
        ],
        "properties": {
          "create_position": {
            "$ref": "#/definitions/CreatePositionMessage"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Deposit funds onto the app",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "funds"
            ],
            "properties": {
              "belief_price0": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "belief_price1": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "funds": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "max_spread": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw liquidity available on the position",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "properties": {
              "amount": {
                "description": "Liquidity amount, withdraws everything when omitted",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint256"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "swap_to": {
                "description": "When provided, will swap withdrawn liquidity to single asset",
                "anyOf": [
                  {
                    "$ref": "#/definitions/SwapToAsset"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Auto-compounds the pool rewards into the pool",
        "type": "object",
        "required": [
          "autocompound"
        ],
        "properties": {
          "autocompound": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AssetEntry": {
        "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
        "type": "string"
      },
      "AutocompoundRewardsConfig": {
        "description": "Configuration on how rewards should be distributed to the address who helped to execute autocompound",
        "type": "object",
        "required": [
          "gas_asset",
          "max_gas_balance",
          "min_gas_balance",
          "reward",
          "swap_asset"
        ],
        "properties": {
          "gas_asset": {
            "description": "Gas denominator for this chain",
            "allOf": [
              {
                "$ref": "#/definitions/AssetEntry"
              }
            ]
          },
          "max_gas_balance": {
            "description": "Upper bound of gas tokens expected after the swap",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "min_gas_balance": {
            "description": "If gas token balance falls below this bound a swap will be generated",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "reward": {
            "description": "Reward amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "swap_asset": {
            "description": "Denominator of the asset that will be used for swap to the gas asset",
            "allOf": [
              {
                "$ref": "#/definitions/AssetEntry"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CreatePositionMessage": {
        "type": "object",
        "required": [
          "asset0",
          "asset1",
          "funds",
          "lower_tick",
          "upper_tick"
        ],
        "properties": {
          "asset0": {
            "description": "The two next fields indicate the token0/token1 ratio we want to deposit inside the current ticks",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "asset1": {
            "$ref": "#/definitions/Coin"
          },
          "belief_price0": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "belief_price1": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "funds": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Coin"
            }
          },
          "lower_tick": {
            "type": "integer",
            "format": "int64"
          },
          "max_spread": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "upper_tick": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "SwapToAsset": {
        "type": "object",
        "required": [
          "to_asset"
        ],
        "properties": {
          "max_spread": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "to_asset": {
            "$ref": "#/definitions/AssetEntry"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "App query messages",
    "oneOf": [
      {
        "description": "Get the config of the carrot app",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the balance and liquidity of the position",
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the position id",
        "type": "object",
        "required": [
          "position"
        ],
        "properties": {
          "position": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the status of the compounding logic of the application and pool rewards Returns [`CompoundStatusResponse`]",
        "type": "object",
        "required": [
          "compound_status"
        ],
        "properties": {
          "compound_status": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AssetsBalanceResponse",
      "type": "object",
      "required": [
        "balances",
        "liquidity"
      ],
      "properties": {
        "balances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "liquidity": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "compound_status": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CompoundStatusResponse",
      "type": "object",
      "required": [
        "autocompound_reward",
        "autocompound_reward_available",
        "incentives",
        "spread_rewards",
        "status"
      ],
      "properties": {
        "autocompound_reward": {
          "$ref": "#/definitions/AssetBase_for_String"
        },
        "autocompound_reward_available": {
          "description": "Wether user have enough balance to reward or can swap to get enough",
          "type": "boolean"
        },
        "incentives": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "spread_rewards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "status": {
          "$ref": "#/definitions/CompoundStatus"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetBase_for_String": {
          "description": "Represents a fungible asset with a known amount\n\nEach asset instance contains two values: `info`, which specifies the asset's type (CW20 or native), and its `amount`, which specifies the asset's amount.",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "Specifies the asset's amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Specifies the asset's type (CW20 or native)",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfoBase_for_String"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfoBase_for_String": {
          "description": "Represents the type of an fungible asset.\n\nEach **asset info** instance can be one of three variants:\n\n- Native SDK coins. To create an **asset info** instance of this type, provide the denomination. - CW20 tokens. To create an **asset info** instance of this type, provide the contract address.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "native"
              ],
              "properties": {
                "native": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "cw20"
              ],
              "properties": {
                "cw20": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "CompoundStatus": {
          "description": "Wether contract is ready for the compound",
          "oneOf": [
            {
              "description": "Contract is ready for the compound",
              "type": "object",
              "required": [
                "ready"
              ],
              "properties": {
                "ready": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "How much seconds left for the next compound",
              "type": "object",
              "required": [
                "cooldown"
              ],
              "properties": {
                "cooldown": {
                  "$ref": "#/definitions/Uint64"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "No open position right now",
              "type": "object",
              "required": [
                "no_position"
              ],
              "properties": {
                "no_position": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Position exists in state, but errors on query to the pool",
              "type": "object",
              "required": [
                "position_not_available"
              ],
              "properties": {
                "position_not_available": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "autocompound_cooldown_seconds",
        "autocompound_rewards_config",
        "pool_config"
      ],
      "properties": {
        "autocompound_cooldown_seconds": {
          "$ref": "#/definitions/Uint64"
        },
        "autocompound_rewards_config": {
          "$ref": "#/definitions/AutocompoundRewardsConfig"
        },
        "pool_config": {
          "$ref": "#/definitions/PoolConfig"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AssetEntry": {
          "description": "An unchecked ANS asset entry. This is a string that is formatted as `src_chain>[intermediate_chain>]asset_name`",
          "type": "string"
        },
        "AutocompoundRewardsConfig": {
          "description": "Configuration on how rewards should be distributed to the address who helped to execute autocompound",
          "type": "object",
          "required": [
            "gas_asset",
            "max_gas_balance",
            "min_gas_balance",
            "reward",
            "swap_asset"
          ],
          "properties": {
            "gas_asset": {
              "description": "Gas denominator for this chain",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            },
            "max_gas_balance": {
              "description": "Upper bound of gas tokens expected after the swap",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "min_gas_balance": {
              "description": "If gas token balance falls below this bound a swap will be generated",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "reward": {
              "description": "Reward amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "swap_asset": {
              "description": "Denominator of the asset that will be used for swap to the gas asset",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetEntry"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "PoolConfig": {
          "type": "object",
          "required": [
            "asset0",
            "asset1",
            "pool_id"
          ],
          "properties": {
            "asset0": {
              "$ref": "#/definitions/AssetEntry"
            },
            "asset1": {
              "$ref": "#/definitions/AssetEntry"
            },
            "pool_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "position": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PositionResponse",
      "type": "object",
      "properties": {
        "position_id": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}
